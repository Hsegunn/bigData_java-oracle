CREATE TABLE DEPT_tmp AS SELECT * FROM DEPT;
SELECT * FROM DEPT_tmp;
--update ~ set
UPDATE DEPT_TMP SET LOC = 'SEOUL';	--해당열 전체 수정
UPDATE DEPT_TMP SET DNAME = 'DATABASE1', LOC = 'PUSAN'	--일부수정
WHERE DEPTNO = 40;
--서브쿼리를 사용한 데이터 수정
UPDATE DEPT_TMP SET (DNAME, LOC) = 
(SELECT DNAME, LOC FROM DEPT WHERE DEPTNO = 40)
WHERE DEPTNO = 40;
--DELETE
CREATE TABLE EMP_TMP AS SELECT * FROM EMP;
SELECT * FROM EMP_TMP;
DELETE FROM EMP_TMP WHERE JOB = 'SALESMAN';
--서브쿼리를 사용한 데이터 삭제
DELETE FROM EMP_TMP;		--데이터삭제
SELECT * FROM EMP_TMP;
DROP TABLE EMP_TMP;			--테이블삭제
--트랜잭션
CREATE TABLE DEPT_TMP;
SELECT * FROM TAB;
SELECT * FROM DEPT_TMP;
CREATE TABLE DEPT_TCL
AS SELECT * FROM DEPT;
SELECT * FROM DEPT_TCL;

INSERT INTO DEPT_TCL VALUES(50, 'DATABASE', 'BUSAN');
UPDATE DEPT_TCL SET LOC = 'BUSAN' WHERE DEPTNO = 40;
DELETE FROM DEPT_TCL WHERE DNAME = 'RESEARCH';

ROLLBACK;		--트랜젝션 취소
COMMIT;			--트랜젝션 적용

--VIEW
CREATE VIEW VM_EMP AS 
(SELECT EMPNO, ENAME, JOB, DEPTNO FROM EMP WHERE DEPTNO = 20);
SELECT * FROM VM_EMP;
SELECT * FROM USER_VIEWS;
DROP VIEW VM_EMP;

--테이블, 데이터사전, 인덱스, 뷰, 시퀀스, 동의어
--데이터사전
SELECT * FROM DICT;				     --사용가능한 데이터 사전
SELECT TABLE_NAME FROM USER_TABLES;	 --사용자(ADAM)가 가지고 있는 테이블 조회
SELECT OWNER, TABLE_NAME FROM ALL_TABLES; --현재 접속가능한 모든 테이블 조회
SELECT * FROM DBA_TABLES;			 --관리권한의 사용자만 접근가능 

--시퀀스
CREATE TABLE DEPT_SEQ AS SELECT * FROM DEPT WHERE 1 != 1;
SELECT * FROM DEPT_SEQ;
DROP TABLE DEPT_SEQ;
CREATE SEQUENCE SEQ_DEPT_SEQUENCE		--시퀀스테이블 이름
INCREMENT BY 10			--증가하는값
START WITH 10			--시작 값
MAXVALUE 90				--최댓값
MINVALUE 0				--최솟값
NOCYCLE					--최댓값이면 정지, 순환금지
CACHE 2;				--2개의 CACHE 사용
SELECT * FROM USER_SEQUENCES;
--시퀀스 NEXTVAL
INSERT INTO DEPT_SEQ (DEPTNO, DNAME, LOC)
VALUES (SEQ_DEPT_SEQUENCE.NEXTVAL, 'DATABASE', 'BUSAN');

SELECT * FROM DEPT_SEQ;

INSERT INTO DEPT_SEQ (DEPTNO, DNAME, LOC)
VALUES (SEQ_DEPT_SEQUENCE.NEXTVAL, 'DATABASE1', 'SEOUL');
INSERT INTO DEPT_SEQ (DEPTNO, DNAME, LOC)
VALUES (SEQ_DEPT_SEQUENCE.NEXTVAL, 'DATABASE2', 'SEOUL');

SELECT * FROM DEPT_SEQ;

--[시퀀스.CURRVAL] 가장 마지막의 시퀀스 확인
SELECT  SEQ_DEPT_SEQUENCE.CURRVAL FROM DUAL;
--시퀀스 수정
ALTER SEQUENCE SEQ_DEPT_SEQUENCE INCREMENT BY 3 MAXVALUE 99 CYCLE;
SELECT * FROM USER_SEQUENCES;
DROP SEQUENCE SEQ_DEPT_SEQUENCE;
--DDL
--테이블 생성
CREATE TABLE EMP_DDL(
	EMPNO NUMBER(4),
	ENAME VARCHAR2(10),
	JOB VARCHAR2(9),
	MGR NUMBER(4),
	HIREDATE DATE,
	SAL NUMBER(7,2),
	COMM NUMBER(7,2),
	DEPTNO NUMBER(2)
);
CREATE TABLE EMP_DDL1 AS SELECT * FROM EMP WHERE DEPTNO = 30;
SELECT * FROM EMP_DDL1;
CREATE TABLE EMP_DDL2 AS SELECT * FROM EMP WHERE 1 != 1;
SELECT * FROM EMP_DDL2;
--테이블 수정
ALTER TABLE EMP_DDL1 ADD HP VARCHAR2(20);	  --열 추가
SELECT * FROM EMP_DDL1;
ALTER TABLE EMP_DDL1 RENAME COLUMN HP TO TEL; --컬럼명변경
COMMIT;
ALTER TABLE EMP_DDL1 MODIFY EMPNO NUMBER(10); --자료형변경
ALTER TABLE EMP_DDL1 DROP COLUMN TEL;		  --컬럼삭제
TRUNCATE TABLE EMP_DDL1;
DROP TABLE EMP_DDL;D
DROP TABLE EMP_DDL1;
DROP TABLE EMP_DDL2;
----------------------------------------------------------------
--제약조건
CREATE TABLE TBL_EX (
LOGIN_ID VARCHAR2(20) NOT NULL,
LOGIN_PW VARCHAR2(20) NOT NULL,
TEL VARCHAR2(20)
);
SELECT * FROM TBL_EX;
INSERT INTO TBL_EX te (LOGIN_ID, LOGIN_PW, TEL)
VALUES ('AAAA', '1234', NULL);
INSERT INTO TBL_EX te (LOGIN_ID, LOGIN_PW, TEL)
VALUES ('BBBB', 'NULL', NULL);
--기존의 데이터가 변경할 제약조건에 부합되면 변경불가
--ALTER TABLE TBL_EX MODIFY TEL NOT NULL; 
UPDATE TBL_EX SET TEL = '01012341234' WHERE LOGIN_ID = 'AAAA';
--UNIQUE
CREATE TABLE TBL_UNIQ2(
LOGIN_ID VARCHAR2(20) PRIMARY KEY,		--중복과 NULL을 허용하지 않는다.
LOGIN_PW VARCHAR2(20) NOT NULL,
TEL VARCHAR2(20)
);
SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME 
FROM USER_CONSTRAINTS;

SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME,
R_OWNER, R_CONSTRAINT_NAME 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('EMP','DEPT');

--CHECK
--010-1454-5555
--010-[1-5][0-9][0-9][0-9][0-9][0-9][0-9][0-9]
--010-\d\d\d\d-\d\d\d\d
--010-\d{4}-\d{4}w
CREATE TABLE TBL_CHK(
LOGIN_ID VARCHAR2(20) CONSTRAINT TBLCK_LOGINIG_PK PRIMARY KEY,
LOGIN_PW VARCHAR2(20) CONSTRAINT TBLCK_LOGINIG_CK 
CHECK(LENGTH(LOGIN_PW) > 3),
TEL VARCHAR2(20)
);
--1.EMP테이블에서 사원번호가 7521인 사원의 직업과 같고, 7934인 사원의 급여보다 많은 사원의
--사번,이름,직업, 급여를 출력
SELECT * FROM EMP;
SELECT EMPNO, ENAME, JOB, SAL FROM EMP
WHERE EMP.JOB = (SELECT EMP.JOB FROM EMP WHERE EMP.EMPNO = 7521)
AND EMP.SAL > (SELECT EMP.SAL FROM EMP WHERE EMP.EMPNO = 7934);

--2.직업별로 최소급여를 받는 사원의 사원번호, 이름,업무,부서명으로 출력(직업별 내림차순)
SELECT * FROM EMP;
SELECT EMPNO, ENAME, JOB, DNAME, SAL FROM EMP 
INNER JOIN DEPT ON (EMP.DEPTNO = DEPT.DEPTNO)
WHERE (JOB, SAL) IN (SELECT JOB, MIN(SAL)FROM EMP GROUP BY JOB)
ORDER BY JOB DESC;

--3.각 사원별 커미션이 0또는 NUIL이고 부서위치가 'GO'로 끝나는 사원의 정보를 사원번호,
--사원이름,커미션,부서번호,부서명,부서위치로 출력(보너스가NULL이면 0으로 출력)
SELECT * FROM EMP;
SELECT * FROM DEPT;
SELECT EMP.EMPNO, EMP.ENAME, NVL(COMM, 0) AS COMM, 
DEPT.DEPTNO, DEPT.DNAME, DEPT.LOC FROM EMP
INNER JOIN DEPT ON EMP.DEPTNO = DEPT.DEPTNO
WHERE (COMM = 0 OR COMM IS NULL) AND DEPT.LOC LIKE '%GO';